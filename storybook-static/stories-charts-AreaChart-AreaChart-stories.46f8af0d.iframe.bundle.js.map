{"version":3,"file":"stories-charts-AreaChart-AreaChart-stories.46f8af0d.iframe.bundle.js","mappings":";;;;;;;;;;;;AAmPA;;;;;AAKA;;AAEA","sources":["webpack://storybook/./src/stories/charts/AreaChart/AreaChart.tsx"],"sourcesContent":["import {\r\n    AnimatedAreaSeries,\r\n    AnimatedAxis,\r\n    AnimatedGrid,\r\n    Tooltip,\r\n    XYChart,\r\n    GlyphSeries\r\n} from '@visx/xychart';\r\nimport { curveMonotoneX } from '@visx/curve';\r\nimport { Text } from '@visx/text';\r\nimport styled from '@emotion/styled';\r\n\r\nconst font =\r\n    'Inter,ui-sans-serif,system-ui,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji';\r\nconst fontSize = '.875rem';\r\nconst titleFontSize = '1.125rem';\r\nconst titleLineHeight = '1.5rem';\r\nconst titleFontWeight = '500';\r\nconst titleHeight = 2 * 16;\r\nconst tickLabelOffset = 10;\r\n\r\nimport React from 'react';\r\nimport { AreaChartMock } from './AreaChartMock';\r\nimport { Curve } from '@visx/visx';\r\nimport { ChartValue, ChartValues } from '../ChartTypes';\r\n\r\nexport type BarsProps = {\r\n    width?: number;\r\n    height?: number;\r\n    title?: string;\r\n    events?: boolean;\r\n    data?: ChartValues;\r\n    curve?: boolean;\r\n    showLabels: boolean;\r\n};\r\n\r\nconst customPaper = {\r\n    paddingTop: '1rem',\r\n    borderRadius: '.5rem',\r\n    boxShadow: `0px 1px 3px rgba(0, 0, 0, 0.2),\r\n                0px 1px 1px rgba(0, 0, 0, 0.14),\r\n                0px 2px 1px rgba(0, 0, 0, 0.12)`,\r\n    backgroundColor: '#fff',\r\n};\r\n\r\nconst AreaChart = ({\r\n    title = 'Area Chart',\r\n    data = AreaChartMock,\r\n    width = 800,\r\n    height = 300,\r\n    curve = true,\r\n    showLabels = false,\r\n}: BarsProps) => {\r\n    // Data Accessors\r\n    const accessors = {\r\n        xAccessor: (d: ChartValue) => new Date(parseInt(d.Label), 0, 1), // Convert year string to Date\r\n        yAccessor: (d: ChartValue) => d.Value,\r\n    };\r\n\r\n    // Extract unique Y-values\r\n    const uniqueYValues = [...new Set(data.map(accessors.yAccessor))];\r\n    console.log({ uniqueYValues })\r\n    // Data Formatters\r\n    const dateFormatter = new Intl.DateTimeFormat('en-US', {\r\n        year: 'numeric',\r\n    });\r\n\r\n    const tooltipDateFormatter = new Intl.DateTimeFormat('en-US', {\r\n        year: 'numeric',\r\n    });\r\n    console.log({ data });\r\n    return (\r\n        <ChartContainer style={{ ...customPaper, width, height }}>\r\n            <XYChart\r\n                height={270}\r\n                margin={{ left: 60, top: 35, bottom: 35, right: showLabels ? 50 : 35  }}\r\n                xScale={{ type: 'time' }}\r\n                yScale={{ type: 'linear' }}>\r\n                <Text\r\n                    x={24}\r\n                    y={titleHeight / 2}\r\n                    fill='#374151'\r\n                    fontFamily={font}\r\n                    fontSize={titleFontSize}\r\n                    fontWeight={titleFontWeight}\r\n                    lineHeight={titleLineHeight}>\r\n                    {title}\r\n                </Text>\r\n                {/* Define the gradient */}\r\n                <svg>\r\n                    <defs>\r\n                        <linearGradient\r\n                            id='line-gradient'\r\n                            x1='0%'\r\n                            y1='0%'\r\n                            x2='0%'\r\n                            y2='100%'>\r\n                            <stop offset='0%' stopColor='#3b82f6' stopOpacity={0.8} />\r\n                            <stop offset='100%' stopColor='#3b82f6' stopOpacity={0} />\r\n                        </linearGradient>\r\n                    </defs>\r\n                </svg>\r\n                {/* Horizontal Grid Lines */}\r\n                <AnimatedGrid\r\n                    columns={false}\r\n                    // numTicks={4}\r\n                    numTicks={uniqueYValues.length}\r\n                    lineStyle={{\r\n                        stroke: 'rgba(29,29,29, .1)',\r\n                        strokeLinecap: 'round',\r\n                        strokeWidth: 1,\r\n                    }}\r\n                    strokeDasharray='0'\r\n                />\r\n                {/* Bottom Labels */}\r\n                <AnimatedAxis\r\n                    hideAxisLine\r\n                    hideTicks\r\n                    orientation='bottom'\r\n                    numTicks={4}\r\n                    // tickValues={uniqueYValues}\r\n                    tickFormat={(d) => dateFormatter.format(new Date(d))}\r\n                    // tickFormat={(d) => format(d, `MMM yy`)}\r\n                    tickLabelProps={() => ({\r\n                        dy: tickLabelOffset,\r\n                        style: {\r\n                            fill: 'rgba(29,29,29, 0.5)',\r\n                            fontFamily: font,\r\n                            fontSize: fontSize,\r\n                        },\r\n                    })}\r\n                />\r\n                {/* Left Labels */}\r\n                <AnimatedAxis\r\n                    hideAxisLine\r\n                    hideTicks\r\n                    orientation='left'\r\n                    numTicks={4}\r\n                    tickLabelProps={() => ({\r\n                        dx: -10,\r\n                        style: {\r\n                            fill: 'rgba(29,29,29, 0.5)',\r\n                            fontFamily: font,\r\n                            fontSize: fontSize,\r\n                        },\r\n                    })}\r\n                />\r\n\r\n                <AnimatedAreaSeries\r\n                    dataKey='primary_line'\r\n                    data={data}\r\n                    {...accessors}\r\n                    curve={curve ? curveMonotoneX : Curve.curveLinear}\r\n                    lineProps={{ stroke: '#3b82f6' }}\r\n                    fill='url(#line-gradient)'\r\n                    strokeWidth={2}\r\n                />\r\n                {/* Add GlyphSeries for Dots */}\r\n                {showLabels ? <GlyphSeries\r\n                    dataKey=\"glyphs\"\r\n                    data={data}\r\n                    {...accessors}\r\n                    renderGlyph={(props) => (\r\n                        <>\r\n                            <circle\r\n                                r={4}\r\n                                fill=\"#3b82f6\"\r\n                                stroke=\"#ffffff\"\r\n                                strokeWidth={2}\r\n                                cx={props.x}\r\n                                cy={props.y}\r\n                            />\r\n                            <Text\r\n                                key={props.x}\r\n                                x={props.x + 25}\r\n                                y={props.y + 5} \r\n                                fill=\"#292929\"\r\n                                fontFamily={font}\r\n                                fontSize={12}\r\n                                textAnchor=\"middle\">\r\n                                {accessors.yAccessor(props.datum)}\r\n                            </Text>\r\n                        </>\r\n\r\n                    )}\r\n                /> :\r\n                <Tooltip\r\n                    snapTooltipToDatumX\r\n                    snapTooltipToDatumY\r\n                    showSeriesGlyphs\r\n                    glyphStyle={{\r\n                        fill: '#3b82f6',\r\n                        strokeWidth: 0,\r\n                    }}\r\n                    renderTooltip={({ tooltipData }) => {\r\n                        return (\r\n                            <TooltipContainer>\r\n                                {tooltipData &&\r\n                                    Object.entries(tooltipData.datumByKey).map(\r\n                                        (lineDataArray) => {\r\n                                            const [key, value] = lineDataArray;\r\n                                            const datum = value.datum as ChartValue;\r\n\r\n                                            return (\r\n                                                <div className='row' key={key}>\r\n                                                    <div className='date'>\r\n                                                        {tooltipDateFormatter.format(\r\n                                                            accessors.xAccessor(datum)\r\n                                                        )}\r\n                                                    </div>\r\n                                                    <div className='value'>\r\n                                                        <ColoredSquare color='#3b82f6' />\r\n                                                        {accessors.yAccessor(datum)}\r\n                                                    </div>\r\n                                                </div>\r\n                                            );\r\n                                        }\r\n                                    )}\r\n                            </TooltipContainer>\r\n                        );\r\n                    }}\r\n                />}\r\n            </XYChart>\r\n        </ChartContainer>\r\n    );\r\n};\r\n\r\nexport default AreaChart;\r\n\r\nconst ChartContainer = styled.div`\r\n    text {\r\n      font-family: 'Untitled Sans', sans-serif;\r\n    }\r\n  \r\n    .visx-axis-tick {\r\n      text {\r\n        font-size: 12px;\r\n        font-weight: 400;\r\n        fill: #666666;\r\n      }\r\n    }\r\n  `;\r\n\r\nconst ColoredSquare = styled.div`\r\n    display: inline-block;\r\n    width: 11px;\r\n    height: 11px;\r\n    margin-right: 8px;\r\n    background: ${({ color }) => color};\r\n    border-radius: 4px;\r\n  `;\r\n\r\nconst TooltipContainer = styled.div`\r\n    padding: 8px 16px;\r\n    font-size: 12px;\r\n    border-radius: 4px;\r\n    color: #222222;\r\n  \r\n    .date {\r\n      font-size: 12px;\r\n      margin-bottom: 8px;\r\n      color: #222222;\r\n      font-weight: 600;\r\n    }\r\n    .value {\r\n      display: flex;\r\n      align-items: center;\r\n      font-weight: 400;\r\n      color: #000000;\r\n    }\r\n  `;\r\n"],"names":[],"sourceRoot":""}